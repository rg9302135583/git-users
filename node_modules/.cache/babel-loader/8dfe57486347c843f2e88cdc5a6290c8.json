{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"children\", \"className\", \"value\", \"defaultValue\", \"orientation\", \"direction\", \"component\", \"components\", \"componentsProps\", \"onChange\", \"selectionFollowsFocus\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { appendOwnerState } from '../utils';\nimport composeClasses from '../composeClasses';\nimport { getTabsUnstyledUtilityClass } from './tabsUnstyledClasses';\nimport useTabs from './useTabs';\nimport Context from './TabsContext';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nconst useUtilityClasses = ownerState => {\n  const {\n    orientation\n  } = ownerState;\n  const slots = {\n    root: ['root', orientation]\n  };\n  return composeClasses(slots, getTabsUnstyledUtilityClass, {});\n};\n/**\r\n *\r\n * Demos:\r\n *\r\n * - [Tabs](https://mui.com/components/tabs/)\r\n *\r\n * API:\r\n *\r\n * - [TabsUnstyled API](https://mui.com/api/tabs-unstyled/)\r\n */\n\n\nconst TabsUnstyled = /*#__PURE__*/React.forwardRef((props, ref) => {\n  var _ref, _componentsProps$root;\n\n  const {\n    children,\n    className,\n    orientation = 'horizontal',\n    direction = 'ltr',\n    component,\n    components = {},\n    componentsProps = {}\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const {\n    tabsContextValue,\n    getRootProps\n  } = useTabs(props);\n\n  const ownerState = _extends({}, props, {\n    orientation,\n    direction\n  });\n\n  const classes = useUtilityClasses(ownerState);\n  const TabsRoot = (_ref = component != null ? component : components.Root) != null ? _ref : 'div';\n  const tabsRootProps = appendOwnerState(TabsRoot, _extends({}, other, componentsProps.root), ownerState);\n  return /*#__PURE__*/_jsx(TabsRoot, _extends({}, getRootProps(), tabsRootProps, {\n    ref: ref,\n    className: clsx(classes.root, (_componentsProps$root = componentsProps.root) == null ? void 0 : _componentsProps$root.className, className),\n    children: /*#__PURE__*/_jsx(Context.Provider, {\n      value: tabsContextValue,\n      children: children\n    })\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? TabsUnstyled.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n\n  /**\r\n   * The content of the component.\r\n   */\n  children: PropTypes.node,\n\n  /**\r\n   * @ignore\r\n   */\n  className: PropTypes.string,\n\n  /**\r\n   * The component used for the root node.\r\n   * Either a string to use a HTML element or a component.\r\n   */\n  component: PropTypes.elementType,\n\n  /**\r\n   * The components used for each slot inside the Tabs.\r\n   * Either a string to use a HTML element or a component.\r\n   * @default {}\r\n   */\n  components: PropTypes.shape({\n    Root: PropTypes.elementType\n  }),\n\n  /**\r\n   * The props used for each slot inside the Tabs.\r\n   * @default {}\r\n   */\n  componentsProps: PropTypes.shape({\n    root: PropTypes.object\n  }),\n\n  /**\r\n   * The default value. Use when the component is not controlled.\r\n   */\n  defaultValue: PropTypes.oneOfType([PropTypes.oneOf([false]), PropTypes.number, PropTypes.string]),\n\n  /**\r\n   * The direction of the text.\r\n   * @default 'ltr'\r\n   */\n  direction: PropTypes.oneOf(['ltr', 'rtl']),\n\n  /**\r\n   * Callback invoked when new value is being set.\r\n   */\n  onChange: PropTypes.func,\n\n  /**\r\n   * The component orientation (layout flow direction).\r\n   * @default 'horizontal'\r\n   */\n  orientation: PropTypes.oneOf(['horizontal', 'vertical']),\n\n  /**\r\n   * If `true` the selected tab changes on focus. Otherwise it only\r\n   * changes on activation.\r\n   */\n  selectionFollowsFocus: PropTypes.bool,\n\n  /**\r\n   * The value of the currently selected `Tab`.\r\n   * If you don't want any selected `Tab`, you can set this prop to `false`.\r\n   */\n  value: PropTypes.oneOfType([PropTypes.oneOf([false]), PropTypes.number, PropTypes.string])\n} : void 0;\nexport default TabsUnstyled;","map":null,"metadata":{},"sourceType":"module"}