{"ast":null,"code":"var register = require('./lib/register');\n\nvar addHook = require('./lib/add');\n\nvar removeHook = require('./lib/remove'); // bind with array of arguments: https://stackoverflow.com/a/21792913\n\n\nvar bind = Function.bind;\nvar bindable = bind.bind(bind);\n\nfunction bindApi(hook, state, name) {\n  var removeHookRef = bindable(removeHook, null).apply(null, name ? [state, name] : [state]);\n  hook.api = {\n    remove: removeHookRef\n  };\n  hook.remove = removeHookRef;\n  ['before', 'error', 'after', 'wrap'].forEach(function (kind) {\n    var args = name ? [state, kind, name] : [state, kind];\n    hook[kind] = hook.api[kind] = bindable(addHook, null).apply(null, args);\n  });\n}\n\nfunction HookSingular() {\n  var singularHookName = 'h';\n  var singularHookState = {\n    registry: {}\n  };\n  var singularHook = register.bind(null, singularHookState, singularHookName);\n  bindApi(singularHook, singularHookState, singularHookName);\n  return singularHook;\n}\n\nfunction HookCollection() {\n  var state = {\n    registry: {}\n  };\n  var hook = register.bind(null, state);\n  bindApi(hook, state);\n  return hook;\n}\n\nvar collectionHookDeprecationMessageDisplayed = false;\n\nfunction Hook() {\n  if (!collectionHookDeprecationMessageDisplayed) {\n    console.warn('[before-after-hook]: \"Hook()\" repurposing warning, use \"Hook.Collection()\". Read more: https://git.io/upgrade-before-after-hook-to-1.4');\n    collectionHookDeprecationMessageDisplayed = true;\n  }\n\n  return HookCollection();\n}\n\nHook.Singular = HookSingular.bind();\nHook.Collection = HookCollection.bind();\nmodule.exports = Hook; // expose constructors as a named property for TypeScript\n\nmodule.exports.Hook = Hook;\nmodule.exports.Singular = Hook.Singular;\nmodule.exports.Collection = Hook.Collection;","map":null,"metadata":{},"sourceType":"script"}