{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"className\", \"component\", \"components\", \"disabled\", \"componentsProps\"];\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport composeClasses from '../composeClasses';\nimport { getOptionGroupUnstyledUtilityClass } from './optionGroupUnstyledClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nfunction useUtilityClasses(disabled) {\n  const slots = {\n    root: ['root', disabled && 'disabled'],\n    label: ['label'],\n    list: ['list']\n  };\n  return composeClasses(slots, getOptionGroupUnstyledUtilityClass, {});\n}\n/**\r\n * An unstyled option group to be used within a SelectUnstyled.\r\n *\r\n * Demos:\r\n *\r\n * - [Selects](https://mui.com/components/selects/)\r\n *\r\n * API:\r\n *\r\n * - [OptionGroupUnstyled API](https://mui.com/api/option-group-unstyled/)\r\n */\n\n\nconst OptionGroupUnstyled = /*#__PURE__*/React.forwardRef(function OptionGroupUnstyled(props, ref) {\n  var _componentsProps$root, _componentsProps$labe, _componentsProps$list;\n\n  const {\n    className,\n    component,\n    components = {},\n    disabled = false,\n    componentsProps = {}\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const Root = component || (components == null ? void 0 : components.Root) || 'li';\n  const Label = (components == null ? void 0 : components.Label) || 'span';\n  const List = (components == null ? void 0 : components.List) || 'ul';\n  const classes = useUtilityClasses(disabled);\n\n  const rootProps = _extends({}, other, {\n    ref\n  }, componentsProps.root, {\n    className: clsx(classes.root, className, (_componentsProps$root = componentsProps.root) == null ? void 0 : _componentsProps$root.className)\n  });\n\n  const labelProps = _extends({}, componentsProps.label, {\n    className: clsx(classes.label, (_componentsProps$labe = componentsProps.label) == null ? void 0 : _componentsProps$labe.className)\n  });\n\n  const listProps = _extends({}, componentsProps.list, {\n    className: clsx(classes.list, (_componentsProps$list = componentsProps.list) == null ? void 0 : _componentsProps$list.className)\n  });\n\n  return /*#__PURE__*/_jsxs(Root, _extends({}, rootProps, {\n    children: [/*#__PURE__*/_jsx(Label, _extends({}, labelProps, {\n      children: props.label\n    })), /*#__PURE__*/_jsx(List, _extends({}, listProps, {\n      children: props.children\n    }))]\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? OptionGroupUnstyled.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n\n  /**\r\n   * @ignore\r\n   */\n  children: PropTypes.node,\n\n  /**\r\n   * @ignore\r\n   */\n  className: PropTypes.string,\n\n  /**\r\n   * The component used for the Root slot.\r\n   * Either a string to use a HTML element or a component.\r\n   * This is equivalent to components.Root.\r\n   * If both are provided, the component is used.\r\n   */\n  component: PropTypes.elementType,\n\n  /**\r\n   * The components used for each slot inside the OptionGroupUnstyled.\r\n   * Either a string to use a HTML element or a component.\r\n   * @default {}\r\n   */\n  components: PropTypes.shape({\n    Label: PropTypes.elementType,\n    List: PropTypes.elementType,\n    Root: PropTypes.elementType\n  }),\n\n  /**\r\n   * The props used for each slot inside the Input.\r\n   * @default {}\r\n   */\n  componentsProps: PropTypes.shape({\n    label: PropTypes.object,\n    list: PropTypes.object,\n    root: PropTypes.object\n  }),\n\n  /**\r\n   * If `true` all the options in the group will be disabled.\r\n   * @default false\r\n   */\n  disabled: PropTypes.bool,\n\n  /**\r\n   * The human-readable description of the group.\r\n   */\n  label: PropTypes.node\n} : void 0;\nexport default OptionGroupUnstyled;","map":null,"metadata":{},"sourceType":"module"}